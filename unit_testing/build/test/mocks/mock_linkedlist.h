/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_LINKEDLIST_H
#define _MOCK_LINKEDLIST_H

#include "unity.h"
#include "linkedlist.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_linkedlist_Init(void);
void mock_linkedlist_Destroy(void);
void mock_linkedlist_Verify(void);




#define create_node_IgnoreAndReturn(cmock_retval) create_node_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void create_node_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, node cmock_to_return);
#define create_node_StopIgnore() create_node_CMockStopIgnore()
void create_node_CMockStopIgnore(void);
#define create_node_ExpectAndReturn(name, surname, phone, email, cmock_retval) create_node_CMockExpectAndReturn(__LINE__, name, surname, phone, email, cmock_retval)
void create_node_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* name, char* surname, char* phone, char* email, node cmock_to_return);
typedef node (* CMOCK_create_node_CALLBACK)(char* name, char* surname, char* phone, char* email, int cmock_num_calls);
void create_node_AddCallback(CMOCK_create_node_CALLBACK Callback);
void create_node_Stub(CMOCK_create_node_CALLBACK Callback);
#define create_node_StubWithCallback create_node_Stub
#define list_size_IgnoreAndReturn(cmock_retval) list_size_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void list_size_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define list_size_StopIgnore() list_size_CMockStopIgnore()
void list_size_CMockStopIgnore(void);
#define list_size_ExpectAndReturn(head, cmock_retval) list_size_CMockExpectAndReturn(__LINE__, head, cmock_retval)
void list_size_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, node head, int cmock_to_return);
typedef int (* CMOCK_list_size_CALLBACK)(node head, int cmock_num_calls);
void list_size_AddCallback(CMOCK_list_size_CALLBACK Callback);
void list_size_Stub(CMOCK_list_size_CALLBACK Callback);
#define list_size_StubWithCallback list_size_Stub
#define list_add_Ignore() list_add_CMockIgnore()
void list_add_CMockIgnore(void);
#define list_add_StopIgnore() list_add_CMockStopIgnore()
void list_add_CMockStopIgnore(void);
#define list_add_Expect(head, entry) list_add_CMockExpect(__LINE__, head, entry)
void list_add_CMockExpect(UNITY_LINE_TYPE cmock_line, node* head, node entry);
typedef void (* CMOCK_list_add_CALLBACK)(node* head, node entry, int cmock_num_calls);
void list_add_AddCallback(CMOCK_list_add_CALLBACK Callback);
void list_add_Stub(CMOCK_list_add_CALLBACK Callback);
#define list_add_StubWithCallback list_add_Stub
#define list_insert_Ignore() list_insert_CMockIgnore()
void list_insert_CMockIgnore(void);
#define list_insert_StopIgnore() list_insert_CMockStopIgnore()
void list_insert_CMockStopIgnore(void);
#define list_insert_Expect(head, entry, index) list_insert_CMockExpect(__LINE__, head, entry, index)
void list_insert_CMockExpect(UNITY_LINE_TYPE cmock_line, node* head, node entry, int index);
typedef void (* CMOCK_list_insert_CALLBACK)(node* head, node entry, int index, int cmock_num_calls);
void list_insert_AddCallback(CMOCK_list_insert_CALLBACK Callback);
void list_insert_Stub(CMOCK_list_insert_CALLBACK Callback);
#define list_insert_StubWithCallback list_insert_Stub
#define list_delete_index_Ignore() list_delete_index_CMockIgnore()
void list_delete_index_CMockIgnore(void);
#define list_delete_index_StopIgnore() list_delete_index_CMockStopIgnore()
void list_delete_index_CMockStopIgnore(void);
#define list_delete_index_Expect(head, index) list_delete_index_CMockExpect(__LINE__, head, index)
void list_delete_index_CMockExpect(UNITY_LINE_TYPE cmock_line, node* head, int index);
typedef void (* CMOCK_list_delete_index_CALLBACK)(node* head, int index, int cmock_num_calls);
void list_delete_index_AddCallback(CMOCK_list_delete_index_CALLBACK Callback);
void list_delete_index_Stub(CMOCK_list_delete_index_CALLBACK Callback);
#define list_delete_index_StubWithCallback list_delete_index_Stub
#define list_clear_Ignore() list_clear_CMockIgnore()
void list_clear_CMockIgnore(void);
#define list_clear_StopIgnore() list_clear_CMockStopIgnore()
void list_clear_CMockStopIgnore(void);
#define list_clear_Expect(head) list_clear_CMockExpect(__LINE__, head)
void list_clear_CMockExpect(UNITY_LINE_TYPE cmock_line, node* head);
typedef void (* CMOCK_list_clear_CALLBACK)(node* head, int cmock_num_calls);
void list_clear_AddCallback(CMOCK_list_clear_CALLBACK Callback);
void list_clear_Stub(CMOCK_list_clear_CALLBACK Callback);
#define list_clear_StubWithCallback list_clear_Stub
#define list_search_index_IgnoreAndReturn(cmock_retval) list_search_index_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void list_search_index_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, node cmock_to_return);
#define list_search_index_StopIgnore() list_search_index_CMockStopIgnore()
void list_search_index_CMockStopIgnore(void);
#define list_search_index_ExpectAndReturn(head, index, cmock_retval) list_search_index_CMockExpectAndReturn(__LINE__, head, index, cmock_retval)
void list_search_index_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, node head, int index, node cmock_to_return);
typedef node (* CMOCK_list_search_index_CALLBACK)(node head, int index, int cmock_num_calls);
void list_search_index_AddCallback(CMOCK_list_search_index_CALLBACK Callback);
void list_search_index_Stub(CMOCK_list_search_index_CALLBACK Callback);
#define list_search_index_StubWithCallback list_search_index_Stub
#define list_search_field_IgnoreAndReturn(cmock_retval) list_search_field_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void list_search_field_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define list_search_field_StopIgnore() list_search_field_CMockStopIgnore()
void list_search_field_CMockStopIgnore(void);
#define list_search_field_ExpectAndReturn(found, head, field, cmock_retval) list_search_field_CMockExpectAndReturn(__LINE__, found, head, field, cmock_retval)
void list_search_field_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, node* found, node head, char* field, int cmock_to_return);
typedef int (* CMOCK_list_search_field_CALLBACK)(node* found, node head, char* field, int cmock_num_calls);
void list_search_field_AddCallback(CMOCK_list_search_field_CALLBACK Callback);
void list_search_field_Stub(CMOCK_list_search_field_CALLBACK Callback);
#define list_search_field_StubWithCallback list_search_field_Stub
#define print_list_Ignore() print_list_CMockIgnore()
void print_list_CMockIgnore(void);
#define print_list_StopIgnore() print_list_CMockStopIgnore()
void print_list_CMockStopIgnore(void);
#define print_list_Expect(head) print_list_CMockExpect(__LINE__, head)
void print_list_CMockExpect(UNITY_LINE_TYPE cmock_line, node head);
typedef void (* CMOCK_print_list_CALLBACK)(node head, int cmock_num_calls);
void print_list_AddCallback(CMOCK_print_list_CALLBACK Callback);
void print_list_Stub(CMOCK_print_list_CALLBACK Callback);
#define print_list_StubWithCallback print_list_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
